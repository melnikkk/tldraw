"use strict";exports.id=281,exports.ids=[281],exports.modules={7061:(e,t,a)=>{a.d(t,{$C:()=>i,p:()=>r});var o=a(7378);async function n(e,t){let{data:a}=await e.octokit.rest.issues.listComments({owner:o.bw,repo:o.M6,issue_number:t,per_page:100,sort:"created",direction:"asc"});return a.find(e=>e.user?.login===o.ZJ)??null}async function r(e,t,a){let r=await n(e,t);r&&await e.octokit.rest.issues.updateComment({owner:o.bw,repo:o.M6,comment_id:r.id,body:a})}async function i(e,t,a){let r=await n(e,t);r?await e.octokit.rest.issues.updateComment({owner:o.bw,repo:o.M6,comment_id:r.id,body:a}):await e.octokit.rest.issues.createComment({owner:o.bw,repo:o.M6,issue_number:t,body:a})}},5281:(e,t,a)=>{a.a(e,async(e,o)=>{try{a.d(t,{q:()=>c});var n=a(2851),r=a(9038),i=a(9398),s=e([n]);async function c(e,t){let a=t.name;"action"in t.payload&&(a+=`.${t.payload.action}`),console.log("Starting event:",a);let o=`on${(0,i.kC)((0,i.eV)(t.name))}`,s={};for(let a of n.j)if(o in a){let n=`${a.name}.${o}`,c=Date.now();try{console.log(`===== Starting ${n} =====`),await a[o](e,t.payload),console.log(`===== Finished ${n} in ${(0,i._J)(c)} =====`),s[n]=`ok in ${(0,i._J)(c)}`}catch(e){s[n]=e.message,await (0,r.e)(`Error in ${a.name}.${o}`,e)}}return s}n=(s.then?(await s)():s)[0],o()}catch(e){o(e)}})},4022:(e,t,a)=>{a.a(e,async(e,o)=>{try{a.d(t,{r:()=>$});var n=a(7181),r=a(7061),i=a(7378),s=e([n]);n=(s.then?(await s)():s)[0];let m=i.M6,g="https://tldraw.notion.site/Contributor-License-Agreement-4d529dd5e4b3438b90cdf2a2f9d7e7e6?pvs=4",f="I have read and agree to the Contributor License Agreement.",h="/huppy check cla",y=["opened","synchronize","reopened","edited"],$={name:"collectClaSignatures",onPullRequest:async(e,t)=>{t.repository.full_name===`${i.bw}/${m}`&&y.includes(t.action)&&await l(e,t.pull_request)},onIssueComment:async(e,t)=>{if(t.repository.full_name===`${i.bw}/${m}`&&void 0!==t.issue.pull_request)switch(t.comment.body.trim().toLowerCase()){case f.toLowerCase():await c(e,t);break;case h.toLowerCase():{let a=await e.octokit.rest.pulls.get({owner:i.bw,repo:m,pull_number:t.issue.number});await l(e,a.data),await e.octokit.rest.reactions.createForIssueComment({owner:i.bw,repo:m,comment_id:t.comment.id,content:"+1"})}}}};async function c(e,t){if(await p(e,t.comment.user.login.toLowerCase())){await e.octokit.rest.reactions.createForIssueComment({owner:i.bw,repo:m,comment_id:t.comment.id,content:"heart"});return}let a={githubId:t.comment.user.id,signedAt:t.comment.created_at,signedVersion:1,signingComment:t.comment.html_url};await e.octokit.rest.repos.createOrUpdateFileContents({owner:i.bw,repo:i.M6,path:`${t.comment.user.login.toLowerCase()}.json`,branch:"cla-signees",content:Buffer.from(JSON.stringify(a,null,"	")).toString("base64"),message:`Add CLA signature for ${t.comment.user.login}`});let o=await e.octokit.rest.pulls.get({owner:i.bw,repo:m,pull_number:t.issue.number});await l(e,o.data),await e.octokit.rest.reactions.createForIssueComment({owner:i.bw,repo:m,comment_id:t.comment.id,content:"heart"})}async function l(e,t){let a=await u(e,t);if(0===a.unsigned.size){await e.octokit.rest.repos.createCommitStatus({owner:i.bw,repo:m,sha:t.head.sha,state:"success",context:"CLA Signatures",description:w(a)}),await (0,r.p)(e,t.number,d(a));return}await e.octokit.rest.repos.createCommitStatus({owner:i.bw,repo:m,sha:t.head.sha,state:"failure",context:"CLA Signatures",description:w(a)}),await (0,r.$C)(e,t.number,d(a))}async function u(e,t){let a=new Set;for(let o of(await e.octokit.paginate("GET /repos/{owner}/{repo}/pulls/{pull_number}/commits",{owner:i.bw,repo:m,pull_number:t.number})))o.author&&!o.author.login.endsWith("[bot]")&&a.add(o.author.login.toLowerCase());let o=new Map,n=new Set;for(let t of[...a].sort()){let a=await p(e,t);a?o.set(t,a):n.add(t)}return{signees:o,unsigned:n,total:a.size}}async function p(e,t){try{let a=await e.octokit.rest.repos.getContent({owner:i.bw,repo:i.M6,path:`${t}.json`,ref:"cla-signees"});return(0,n.hu)(!Array.isArray(a.data),"Expected a file, not a directory"),(0,n.hu)("file"===a.data.type,"Expected a file, not a directory"),{signing:JSON.parse(Buffer.from(a.data.content,"base64").toString("utf-8")),fileSha:a.data.sha}}catch(e){if(404===e.status)return null;throw e}}function d(e){if(e.signees.size>1){let t=`**${e.signees.size}** out of **${e.total}** ${1===e.total?"authors has":"authors have"} signed the [CLA](${g}).

`;for(let a of e.unsigned)t+=`- [ ] @${a}
`;for(let a of e.signees.keys())t+=`- [x] @${a}
`;return 0===e.unsigned.size?`${t}

Thanks!`:`Hey, thanks for your pull request! Before we can merge your PR, each author will need to sign our [Contributor License Agreement](${g}) by posting a comment that reads:

> ${f}
---

${t}`}{let t=[...e.signees.keys()][0];return 0===e.unsigned.size?`**${t}** has signed the [Contributor License Agreement](${g}). Thanks!`:`Hey, thanks for your pull request! Before we can merge your PR, you will need to sign our [Contributor License Agreement](${g}) by posting a comment that reads:

> ${f}`}}function w(e){return`${e.signees.size}/${e.total} signed. Comment '${h}' to re-check.`}o()}catch(e){o(e)}})},1309:(e,t,a)=>{a.d(t,{s:()=>n});var o=a(7378);let n={name:"enforcePrLabels",async onPullRequest(e,t){if(t.repository.full_name!==`${o.bw}/${o.M6}`||t.pull_request.base.ref!==o.RS)return;let a=async a=>{await e.octokit.rest.repos.createCommitStatus({owner:t.repository.owner.login,repo:t.repository.name,sha:t.pull_request.head.sha,state:"failure",description:a,context:"Release Label"})},n=async a=>{await e.octokit.rest.repos.createCommitStatus({owner:t.repository.owner.login,repo:t.repository.name,sha:t.pull_request.head.sha,state:"success",description:a,context:"Release Label"})},r=t.pull_request;if(r.draft)return await n("Draft PR, skipping label check");if(r.closed_at||r.merged_at)return await n("Closed PR, skipping label check");let i=(await e.octokit.rest.issues.listLabelsForRepo({owner:t.repository.owner.login,repo:t.repository.name})).data.map(e=>e.name),s=r.body,c=i.filter(e=>s?.match(RegExp(`^\\s*?-\\s*\\[\\s*x\\s*\\]\\s+\`${e}\``,"m")));return 0===c.length&&0===r.labels.length?a("Please add a label to the PR."):r.body?.includes("Fixed a bug withâ€¦")?a("Add a release note to the PR body."):(console.log("adding labels"),c.length>0&&await e.octokit.rest.issues.addLabels({issue_number:r.number,owner:t.repository.organization??t.repository.owner.login,repo:t.repository.name,labels:c}),await n("PR is labelled!"))}}},2851:(e,t,a)=>{a.a(e,async(e,o)=>{try{a.d(t,{j:()=>c});var n=a(4022),r=a(1309),i=a(2842),s=e([n,i]);[n,i]=s.then?(await s)():s;let c=[r.s,i.o,n.r];o()}catch(e){o(e)}})},2842:(e,t,a)=>{a.a(e,async(e,o)=>{try{a.d(t,{o:()=>d});var n=a(7181),r=a(3292),i=a(1017),s=a(19),c=a(9398),l=e([n]);n=(l.then?(await l)():l)[0];let u=[".gitignore",".prettierrc","LICENSE.md"],p=["typescript","@types/react","@types/react-dom"],d={name:"standaloneExamplesBranch",onCustomHook:async(e,t)=>{await (0,s.Ff)("public",e.installationToken,t.tagToRelease,async({git:e,repoPath:a})=>{let o=i.join(a,".git","standalone-examples"),s=await e.trimmed("rev-parse","HEAD"),l=`standalone-examples-${s}`;for(let t of(await e("checkout","-b",l),console.log("Copying examples into new folder..."),await e.lines("ls-files","apps/examples"))){let e=i.relative("apps/examples",t);await r.mkdir(i.join(o,i.dirname(e)),{recursive:!0}),await r.copyFile(i.join(a,t),i.join(o,e))}for(let e of u)await r.copyFile(i.join(a,e),i.join(o,e));console.log("Creation tsconfig.json...");let d=await (0,c.OY)(i.join(a,"internal/config/tsconfig.base.json"));d.includes=["src"],await r.writeFile(i.join(o,"tsconfig.json"),JSON.stringify(d,null,"	")),console.log("Creation package.json...");let w=await (0,c.OY)(i.join(a,"package.json")),m=await (0,c.OY)(i.join(o,"package.json"));for(let e of p)m.dependencies[e]=w.dependencies[e];for(let e of Object.keys(m.dependencies)){if(!e.startsWith("@tldraw/"))continue;let o=await (0,c.OY)(i.join(a,"packages",e.replace("@tldraw/",""),"package.json"));if((0,n.hu)(o,`package.json for ${e} must exist`),t.canary){let t=o.version.replace(/-.*$/,""),a=`canary.${s.slice(0,12)}`;m.dependencies[e]=`${t}-${a}`}else m.dependencies[e]=o.version}for(let e of(await r.writeFile(i.join(o,"package.json"),JSON.stringify(m,null,"	")),console.log("Deleting existing repo contents..."),await r.readdir(a)))".git"!==e&&await r.rm(i.join(a,e),{recursive:!0,force:!0});for(let e of(console.log("Moving new repo contents into place..."),await r.readdir(o)))await r.rename(i.join(o,e),i.join(a,e));await r.rm(o,{recursive:!0,force:!0}),console.log("Committing & pushing changes..."),await e("add","-A"),await e("commit","-m",`[automated] Update standalone examples from ${t.tagToRelease}`),await e("push","--force","origin",`${l}:examples`)})}};o()}catch(e){o(e)}})},19:(e,t,a)=>{a.d(t,{Ff:()=>f});var o=a(3292),n=a(2037),r=a(1017),i=a(2081);async function s(e,t,{pwd:a=process.cwd(),processStdoutLine:o=e=>process.stdout.write(`${e}
`),processStderrLine:n=e=>process.stderr.write(`${e}
`),env:r}={}){return function(...e){console.log(...e)}(`> $ ${e} ${t.join(" ")} (in ${a}))`),new Promise((s,c)=>{let l=[],u=(0,i.execFile)(e,t.filter(e=>!!e),{cwd:a,env:{...process.env,...r}},e=>{e?c(e):s(l.join(""))}),p="";u.stdout.on("data",e=>{let t=e.toString("utf-8");l.push(t);let a=t.split("\n");for(let e of(a[0]=p+a[0],p=a.pop()??"",a))o(e)}),u.stdout.on("close",()=>{o(p)});let d="";u.stderr.on("data",e=>{let t=e.toString("utf-8");l.push(t);let a=t.split("\n");for(let e of(a[0]=d+a[0],d=a.pop()??"",a))n(e)}),u.stderr.on("close",()=>{n(d)})})}class c{enqueue(e){return new Promise((t,a)=>{this.currentTask=this.currentTask.then(async()=>{try{t(await e())}catch(e){a(e)}})})}constructor(){this.currentTask=Promise.resolve()}}var l=a(7378);let u=new c,p={public:{org:l.bw,name:l.M6,path:"tldraw-public",queue:new c}};function d(e){let t=async(t,...a)=>{var o;return s("git",[t,...a],{pwd:e,...(o=`[git ${t}] `,{processStdoutLine:e=>process.stdout.write(`${o}${e}
`),processStderrLine:e=>process.stderr.write(`${o}${e}
`)})})};return t.trimmed=async(e,...a)=>(await t(e,...a)).trim(),t.lines=async(e,...a)=>(await t(e,...a)).trim().split("\n"),t.cd=t=>d(r.join(e,t)),t}async function w(){try{return await o.writeFile("/tldraw_repo_sync_data/check","ok"),"/tldraw_repo_sync_data"}catch{let e=r.join(n.tmpdir(),"tldraw_repo_sync_data");return await o.mkdir(e,{recursive:!0}),e}}async function m(e,t){let a=p[e],n=await w(),i=r.join(n,a.path);try{await o.rm(i,{recursive:!0,force:!0})}catch{}let c=`https://x-access-token:${t}@github.com/${a.org}/${a.name}.git`;await u.enqueue(()=>s("git",["clone","--mirror",c,i]))}async function g(e,t){let a=p[e];return await a.queue.enqueue(async()=>{let n=await w(),i=r.join(n,a.path),s=d(i);try{await o.readFile(r.join(i,"HEAD"))}catch{return await m(e,t),{repo:a,path:i}}return(await s.trimmed("remote","get-url","origin")).endsWith(`@github.com/${a.org}/${a.name}.git`)?(await s("remote","set-url","origin",`https://x-access-token:${t}@github.com/${a.org}/${a.name}.git`),await s("remote","update")):await m(e,t),{repo:a,path:i}})}async function f(e,t,a,i){let{repo:c,path:l}=await g(e,t),p=r.join(n.tmpdir(),`tldraw_repo_sync_${Math.random().toString(36).slice(2)}`);await u.enqueue(()=>s("git",["clone","--no-checkout",l,p]));let w=d(p);try{return await w("remote","set-url","origin",`https://x-access-token:${t}@github.com/${c.org}/${c.name}.git`),await w("checkout",a),await h(p),await i({repoPath:p,git:w})}finally{await o.rm(p,{recursive:!0})}}async function h(e){let t=d(e);await t("config","--local","user.name",l.ZJ),await t("config","--local","user.email",l.A8)}},9038:(e,t,a)=>{a.d(t,{e:()=>i});var o=a(2037),n=a.n(o);let r=process.env.HUPPY_WEBHOOK_URL;async function i(e,t){if(void 0===r)throw Error("HUPPY_WEBHOOK_URL not set");let a=JSON.stringify({content:`[${n().hostname}] ${e}:
\`\`\`
${t.stack}
\`\`\``});console.log(e,t.stack),await fetch(r,{method:"POST",body:a,headers:{"Content-Type":"application/json"}})}},9398:(e,t,a)=>{a.d(t,{Fs:()=>i,OY:()=>p,_J:()=>l,eV:()=>s,kC:()=>c});var o=a(3292),n=a(1959),r=a.n(n);function i(e,t){let a=e.headers[t];if(!a)throw Error(`Missing header: ${t}`);if(Array.isArray(a))throw Error(`Header ${t} has multiple values`);return a}function s(e){return e.replace(/[_-]([a-z0-9])/gi,e=>e[1].toUpperCase())}function c(e){return e[0].toUpperCase()+e.slice(1)}function l(e){return`${((Date.now()-e)/1e3).toFixed(2)}s`}async function u(e){try{return await o.readFile(e,"utf8")}catch{return null}}async function p(e){let t=await u(e);return null===t?null:r().parse(t)}}};